// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :exec
INSERT INTO transactions (account_id, amount, type, description)
VALUES ($1, $2, $3, $4)
`

type CreateTransactionParams struct {
	AccountID   int32
	Amount      int32
	Type        string
	Description string
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) error {
	_, err := q.db.Exec(ctx, createTransaction,
		arg.AccountID,
		arg.Amount,
		arg.Type,
		arg.Description,
	)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT lim, balance
FROM accounts
WHERE id = $1
LIMIT 1
`

type GetAccountRow struct {
	Lim     int32
	Balance int32
}

func (q *Queries) GetAccount(ctx context.Context, id int32) (GetAccountRow, error) {
	row := q.db.QueryRow(ctx, getAccount, id)
	var i GetAccountRow
	err := row.Scan(&i.Lim, &i.Balance)
	return i, err
}

const getTransactions = `-- name: GetTransactions :many
SELECT amount, type, description, date
FROM transactions
WHERE account_id = $1
ORDER BY id DESC
LIMIT 10
`

type GetTransactionsRow struct {
	Amount      int32
	Type        string
	Description string
	Date        pgtype.Timestamp
}

func (q *Queries) GetTransactions(ctx context.Context, accountID int32) ([]GetTransactionsRow, error) {
	rows, err := q.db.Query(ctx, getTransactions, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTransactionsRow
	for rows.Next() {
		var i GetTransactionsRow
		if err := rows.Scan(
			&i.Amount,
			&i.Type,
			&i.Description,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTransaction = `-- name: InsertTransaction :exec
CALL insert_transaction($1, $2, $3, $4)
`

type InsertTransactionParams struct {
	PAccountID   int32
	PAmount      int32
	PType        string
	PDescription string
}

func (q *Queries) InsertTransaction(ctx context.Context, arg InsertTransactionParams) error {
	_, err := q.db.Exec(ctx, insertTransaction,
		arg.PAccountID,
		arg.PAmount,
		arg.PType,
		arg.PDescription,
	)
	return err
}

const updateAccountBalance = `-- name: UpdateAccountBalance :exec
UPDATE accounts
SET balance = $2
WHERE id = $1
`

type UpdateAccountBalanceParams struct {
	ID      int32
	Balance int32
}

func (q *Queries) UpdateAccountBalance(ctx context.Context, arg UpdateAccountBalanceParams) error {
	_, err := q.db.Exec(ctx, updateAccountBalance, arg.ID, arg.Balance)
	return err
}
